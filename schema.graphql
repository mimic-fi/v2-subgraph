type SmartVault implements Authorizer @entity {
  id: ID!
  balances: [Balance!] @derivedFrom(field: "smartVault")
  priceFeeds: [PriceFeed!] @derivedFrom(field: "smartVault")
  priceOracle: String!
  swapConnector: String!
  bridgeConnector: String!
  strategies: [String!]!
  feeCollector: String!
  wrappedNativeToken: ERC20!
  swapFee: FeeConfig @derivedFrom(field: "smartVault")
  withdrawFee: FeeConfig @derivedFrom(field: "smartVault")
  performanceFee: FeeConfig @derivedFrom(field: "smartVault")
  totalValueManaged: BigInt!
  totalFeesUsd: BigInt!
  totalGasRefundsUsd: BigInt!
  totalRelayedCostUsd: BigInt!
  fees: [Fee!] @derivedFrom(field: "smartVault")
  transactions: [Transaction!] @derivedFrom(field: "smartVault")
  primitiveExecutions: [PrimitiveExecution!] @derivedFrom(field: "smartVault")
  permissions: [Permission!] @derivedFrom(field: "target")
}

type Transaction @entity {
  id: ID!
  smartVault: SmartVault!
  sender: String!
  target: Bytes
  gasUsed: BigInt!
  gasPrice: BigInt!
  costEth: BigInt!
  costUsd: BigInt!
  relayer: String!
  executedAt: BigInt!
  fees: [Fee!] @derivedFrom(field: "transaction")
  primitiveExecutions: [PrimitiveExecution!] @derivedFrom(field: "transaction")
}

type PrimitiveExecution @entity {
  id: ID!
  type: Primitive!
  smartVault: SmartVault!
  transaction: Transaction!
  data: String!
  fee: Fee @derivedFrom(field: "primitiveExecution")
  movements: [Movement!] @derivedFrom(field: "primitiveExecution")
}

enum Primitive {
  Call
  Collect
  Withdraw
  Wrap
  Unwrap
  Claim
  Join
  Exit
  Swap
  Bridge
}

type Movement @entity {
  id: ID!
  smartVault: SmartVault!
  transaction: Transaction!
  primitiveExecution: PrimitiveExecution!
  destinationChainId: BigInt!
  type: MovementType!
  token: ERC20!
  amount: BigInt!
}

enum MovementType {
  In
  Out
}

type Fee @entity {
  id: ID!
  smartVault: SmartVault!
  transaction: Transaction!
  primitiveExecution: PrimitiveExecution!
  pct: BigInt!
  token: ERC20!
  amount: BigInt!
  feeCollector: String!
}

type PriceFeed @entity {
  id: ID!
  smartVault: SmartVault!
  base: ERC20!
  quote: ERC20!
  feed: String!
}

type FeeConfig @entity {
  id: ID!
  smartVault: SmartVault!
  pct: BigInt!
  cap: BigInt!
  token: ERC20!
  period: BigInt!
}

type Balance @entity {
  id: ID!
  smartVault: SmartVault!
  token: ERC20!
  amount: BigInt!
}

type ERC20 @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

interface Authorizer {
  id: ID!
  permissions: [Permission!] @derivedFrom(field: "target")
}

type Permission @entity {
  id: ID!
  method: String!
  target: Authorizer!
  grantees: [Grantee!] @derivedFrom(field: "permissions")
}

type Grantee @entity {
  id: ID!
  permissions: [Permission!]!
}

type Stats @entity {
  id: ID!
  totalFeesUsd: BigInt!
  totalGasRefundsUsd: BigInt!
  totalRelayedCostUsd: BigInt!
}
